---
description: 
globs: 
alwaysApply: false
---
Always:
  - Use global context (`useAuth()`) for user scan quota (`scansRemaining`, `refreshScansRemaining`).
  - Do not use local state for scan quota unless for optimistic UI updates.
  - After any action that changes quota (scan, payment, coupon), call `refreshScansRemaining()`.
  - After any scan attempt (success or failure), always call `refreshScansRemaining()` to ensure UI matches backend quota.
  - When a scan is processed, optimistically decrement the quota in the UI until the next refresh using a local `optimisticScans` state if needed.
  - If `scansRemaining` (or `optimisticScans`) is 0 or less, block scan actions and redirect user to the subscription page. Show an alert explaining the quota is exhausted and offer a button to purchase more scans.
  - If the backend (e.g., via RPC) reports no scans remaining but the UI shows scans left, show a clear alert that the quota is out of sync and suggest refreshing or contacting support.
  - Only check and block quota (with alert and redirect) when the user presses the scan or upload button, not on page load or passive navigation.
  - Ensure this logic is present in all user-initiated scan/upload actions.
  - Use the same badge and display style for scan quota across all screens. Always show the latest quota value from context.
  - For any logic that updates quota, add a comment: `// Updates scan quota using global context`.
  - (Recommended) Refresh scan quota on app resume or when the app comes to the foreground to avoid stale UI.
  - When adding a refresh button for quota, always use the global refreshScansRemaining function and ensure it updates the UI from the backend.
