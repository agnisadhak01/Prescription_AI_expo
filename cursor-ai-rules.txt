---
description: |
  Standardized rules for Cursor AI Editor in this project. These rules automate and enforce best practices for scan quota, error handling, UI, navigation, refactoring, and optimization in the Prescription app.
globs:
  - '**/*.tsx'
  - '**/*.ts'
alwaysApply: true
---
Always:
  - Use global context (`useAuth()`) for user scan quota (`scansRemaining`, `refreshScansRemaining`).
  - Do not use local state for scan quota unless for optimistic UI updates.
  - After any action that changes quota (scan, payment, coupon), call `refreshScansRemaining()`.
  - After any scan attempt (success or failure), always call `refreshScansRemaining()` to ensure UI matches backend quota.
  - When a scan is processed, optimistically decrement the quota in the UI until the next refresh using a local `optimisticScans` state if needed.
  - If `scansRemaining` (or `optimisticScans`) is 0 or less, block scan actions and redirect user to the subscription page. Show an alert explaining the quota is exhausted and offer a button to purchase more scans.
  - If the backend (e.g., via RPC) reports no scans remaining but the UI shows scans left, show a clear alert that the quota is out of sync and suggest refreshing or contacting support.
  - Only check and block quota (with alert and redirect) when the user presses the scan or upload button, not on page load or passive navigation.
  - Ensure this logic is present in all user-initiated scan/upload actions.
  - All API/network/database errors must be caught and shown to the user via `Alert.alert` or a visible UI message. Log errors to the console for debugging.
  - Use the same badge and display style for scan quota across all screens. Always show the latest quota value from context.
  - For any logic that updates quota, add a comment: `// Updates scan quota using global context`.
  - For any payment/coupon logic, add a comment: `// Payment or coupon logic, refreshes scan quota`.
  - After a successful scan or payment, always refresh quota and navigate as appropriate (e.g., to home or subscription page).
  - Always execute database queries if necessarily required, at the time of operation using given supabase MCP server.
  - Place all rules and automation guidelines in `cursor-ai-rules.txt` in the project root.
  - For PayU payment integration:
    - Display the payment button in a WebView modal and handle deep link redirects after payment completion.
    - Use a single webhook endpoint (no query params needed) for both success and failure callbacks from PayU (e.g., https://<project>.supabase.co/functions/v1/payu-webhook).
    - Only update scan quota after a successful webhook call from PayU (never credit scans directly from the app after UI payment success).
    - Always verify the transaction hasn't been processed already by checking the transaction_id in the payment_transactions table. This must be enforced in the webhook code before crediting scans, not just via DB constraints. If a duplicate is detected, do not credit scans again and respond with a message indicating the transaction was already processed.
    - If payments succeed but scans are not credited, always check PayU dashboard webhook/callback logs for delivery attempts and errors.
    - The webhook endpoint must be publicly reachable from PayU's servers; test with both manual POSTs and real PayU transactions.
    - The app should only reflect scan quota changes after backend confirmation via webhook, not just after payment UI success.
    - PayU sends data in URL-encoded form format, not JSON. Webhook must handle both formats for compatibility with testing and real PayU transactions.
    - Always set a minimum scan quota (at least 1) for small test payment amounts (e.g., 1 INR).
    - Process URL-encoded emails with decodeURIComponent and use case-insensitive matching (ilike) when looking up users.
    - Transactions with 0 scan_quota should be updated rather than rejected as "already processed" - this handles multi-stage webhooks from PayU.
    - In the WebView payment flow, don't rely solely on navigation state changes to detect payment success or failure. These can be triggered by intermediate redirects from the payment gateway.
    - When implementing payment detection, check for specific success/failure URLs or parameters that clearly indicate the final payment status.
    - Include a manual close/back button in the WebView payment UI to allow users to exit if the automatic detection fails.
    - Consider using a timeout mechanism that automatically closes the payment WebView if no definitive success/failure state is detected within a reasonable time period.
    - Log all navigation state changes during payment processing for debugging purposes, with clear markers for start, intermediate states, and final outcome.
    - Implement proper loading states during payment processing to prevent multiple payment attempts by the user.
    - The webhook endpoint must carefully validate all incoming data and signatures before processing payments to prevent fraud.
    - Never remove existing payment links when updating to new ones; instead, store all payment links in a constants object (like PAYMENT_URLS) with clear labels for production vs. test links. This allows for easy testing and ensures backward compatibility with existing payment flows when needed.
  - Refactor any code duplication detected by Taskmaster (see tasks with category 'Duplication'). Extract repeated logic into reusable functions or components.
  - Move all hardcoded URLs or API endpoints to a configuration file or constants module. Reference these in code instead of inline strings. (See tasks with category 'Optimization')
  - For any refactoring or optimization, reference the relevant Taskmaster task ID in your commit message (e.g., 'Refactor: extract duplicate logic [task-xxx]').
  - Track all major refactoring, optimization, and technical debt tasks in Taskmaster and keep their status updated.
  - (Recommended) Refresh scan quota on app resume or when the app comes to the foreground to avoid stale UI.
  - If a user reports a repetitive or frustrating issue, always update the rules to encode the fix and prevent recurrence. Encode our conversational experience as rules for any repetitive tasks.
  - The AI assistant must always autonomously perform all code and rule updates required to fix the user's problem, without instructing the user to update or execute code themselves. Only provide next steps for the user to implement in the app after performing all possible automated actions.
  - Whenever any rules are updated, both cursor-ai-rules.txt and .cursor/rules/prescription-rules.mdc must be updated simultaneously to keep them in sync. This ensures consistency between the main rules file and the MDC rules file.
  - When testing webhook endpoints on Windows/PowerShell, use Invoke-WebRequest instead of Unix-style curl flags. Example:
    Invoke-WebRequest -Uri "<url>" -Method POST -Body '{...}' -ContentType "application/json"
    Use backticks for line continuation or put the command on one line. The -Body parameter must be a string (for JSON).
  - If you have Git Bash or WSL, you can use classic curl commands as in Unix/Linux.
  - For Supabase Edge Functions that must be accessible to external webhooks (e.g., PayU), set verify_jwt = false in supabase/config.toml for the relevant function. This allows unauthenticated POSTs from third-party services.
  - After changing function config (e.g., verify_jwt), always redeploy the function using: supabase functions deploy <function-name>
  - Supabase CLI requires Docker Desktop to be installed and running for Edge Function deployment. If deployment fails with a Docker error, start Docker Desktop and retry.
  - For deploying Supabase Edge Functions via CLI:
    - Use `supabase functions new <function-name>` to create a new function.
    - Use `supabase functions deploy <function-name>` to deploy a function.
    - Use `supabase functions list` to view all deployed functions.
    - Use `supabase functions delete <function-name>` to remove a function.
    - For local development and testing, use `supabase start` and `supabase functions serve <function-name>`.
    - When updating existing functions, always check for changes in input/output parameters that might break existing clients.
    - Include proper error handling and CORS configuration in all functions.
    - Use TypeScript types from "jsr:@supabase/functions-js/edge-runtime.d.ts" for better type safety.
  - After redeploying, always test the endpoint with a manual POST (using PowerShell or curl) to confirm it is reachable and does not return 401 Unauthorized. Only then should you expect third-party webhooks to work.
  - The AI assistant is capable of running any required commands directly in the environment and should do so autonomously when needed, rather than instructing the user to run them.
  - The MCP Supabase get_logs tool has limitations and cannot reliably fetch Edge Function logs. When troubleshooting Edge Functions, always ask the user to provide the logs from the Supabase dashboard or through manual testing. This is especially important for PayU webhook troubleshooting.

# Additional rules learned from recent lessons:
- Always ensure UI elements (especially header buttons) are not blocked by system overlays. For Android, add sufficient top padding to account for the status bar (use StatusBar.currentHeight).
- Never leave debug or test code in production. Remove all debug/test buttons, global debug functions, test logs, and temporary test logic before release.
- Only keep essential UI elements in production builds. All test and debug UI must be removed.
- Always use global context (useAuth) for scan quota management and never use local state for quota except for optimistic UI updates.
- When adding new UI elements, ensure minimum touch target size (at least 44x44px) for accessibility and usability.
- When adding a refresh button for quota, always use the global refreshScansRemaining function and ensure it updates the UI from the backend.
- When making layout changes, always test on both Android and iOS to ensure no elements are blocked by system UI overlays.
- All rules and automation guidelines must be kept in sync between cursor-ai-rules.txt and .cursor/rules/prescription-rules.mdc.
- When using StatusBar, prefer non-translucent (translucent={false}) for main screens to avoid layout issues and unexpected spacing at the top.
- Avoid duplicate UI components, especially headers or status bars, that can create unnecessary whitespace or visual inconsistencies.
- When fixing layout issues, first check for duplicate components, status bar configurations, and padding/margin values.
- Preserve original screen layouts when making unrelated changes to prevent unintended UI regressions.
- Never modify tab navigation layouts unnecessarily as it can affect all screens.
- For multi-platform layouts, use Platform.OS to provide platform-specific values rather than one-size-fits-all approaches.
- When adjusting StatusBar components, check how it affects neighboring screens and tab navigation.
- For screens with overlapping headers or gradients, ensure z-index values are properly set to prevent visual artifacts.
- Keep UI element measurements consistent across all screens (e.g., don't use different button sizes for the same action on different screens).
- When refactoring status bar handling, consider moving that logic to a consistent place like navigation configuration rather than individual screens.
- When using custom components like AppStatusBar, ensure they're only added to screens that need them to avoid layout inconsistencies.
- Always configure Supabase client with AsyncStorage in React Native for persistent sessions by adding auth options with storage, autoRefreshToken, persistSession (all true), and detectSessionInUrl (false). Also ensure the AsyncStorage package is properly installed and linked.
- After making changes to authentication or session management, always test by closing and reopening the app to verify persistent login works correctly.
- For module errors like "NativeModule: AsyncStorage is null", always ensure the package is properly installed using "expo install" with the exact version required by your Expo SDK.
- When adding or updating native dependencies like AsyncStorage, a full rebuild is required: 1) stop the current server, 2) run `npx expo prebuild --clean` to clean native code, and 3) run `npx expo run:android` (or ios) to rebuild the app with the new native modules. Simply restarting the dev server is not sufficient.
- If experiencing "Missing the required default export" errors with Expo Router even when the export is present, check if the file is being correctly recognized - this can be a false positive during development that requires a full rebuild to resolve.
- On Windows, be aware of path length limitations (maximum 260 characters) when building React Native projects. Long project paths can cause build failures, especially with nested node_modules. Consider: 1) Moving the project to a shorter path (e.g., C:\RxAI instead of C:\Users\username\Documents\Projects\etc), 2) Using EAS Build for cloud building which avoids local path issues, or 3) Enabling long path support in Windows.
- When local builds fail due to environment issues, use EAS Build (`eas build --platform android --profile development`) as a reliable alternative that provides a consistent build environment and avoids local configuration problems.
- Always maintain an eas.json configuration file for cloud builds with appropriate profiles (development, preview, production) to facilitate quick building without local environment issues.
- Test authentication persistence by fully closing the app (not just minimizing) and reopening it, as this is the only reliable way to verify session storage is working correctly.
- When making native code changes, understand the distinction between JavaScript-only changes (which only require Metro server restart) and native module changes (which require full app rebuild). Native module changes include adding/updating native dependencies, linking native modules, or modifying native code files.
- Use the Development Client (`npx expo start --dev-client`) instead of Expo Go when working with custom native modules. Expo Go only supports a limited set of pre-bundled native modules.
- After adding a new native dependency, always run `npx expo prebuild` to generate or update the native project files before building with `npx expo run:android` or `npx expo run:ios`.
- For consistent development across team members, document all native dependencies in a separate section of README.md including installation steps, required configuration, and potential platform-specific issues.
- When you encounter the error "NativeModule X is null", it indicates a native module wasn't properly linked. The complete solution requires: 1) ensure the package is properly installed, 2) run prebuild to update native files, and 3) perform a full rebuild of the app.
- Metro bundler (`npx expo start`) only handles JavaScript changes. It cannot detect or apply native code changes. Always rebuild the app after any native code modifications.
- Never mix Expo managed workflow and bare workflow concepts - if using custom native modules, commit to using the development client or EAS builds and avoid trying to use Expo Go.

# Google Play Store Compliance Rules:
- Include clear health disclaimers that the app is not intended for medical use, not a medical device, and designed for general organization purposes in all app metadata and relevant UI screens.
- Ensure the privacy policy explicitly discloses what prescription data is collected, how it's processed and stored, who can access it, and what security measures are in place.
- For AI/OCR features, always disclose accuracy limitations and include prompts for users to verify all extracted information.
- Never make medical claims about medications scanned or suggest medical advice - include disclaimers to consult healthcare professionals.
- Ensure all payment features clearly indicate they are for scan quota credits only, not for clinical services.
- Include appropriate disclaimers on scan result screens stating that information may not be 100% accurate and should be verified.
- Add UI elements that prompt users to verify all prescription information after scans complete.
- Never store sensitive medical information without proper encryption and security measures.
- When displaying medication information, include a disclaimer that it's for informational purposes only and not medical advice.
- In all marketing materials and store listings, avoid claims that could be interpreted as offering medical services or advice.

# Legal and Privacy Compliance Rules
- All legal documents (Terms of Service, Privacy Policy) must specify India as the governing jurisdiction.
- Include GDPR (EU) and CCPA (California) compliance sections in Privacy Policy.
- Include clear medical and AI disclaimers at both start and end of legal documents.
- Ensure all user-facing legal text has proper styling with theme-aware colors.
- Add DisclaimerComponent for both medical and AI disclaimers in legal pages.
- Maintain consistent section numbering across legal documents.
- Keep "Last Updated" dates in sync across all legal documents.
- Include contact information (contact@autoomstudio.com) consistently across all legal documents.

# Data Handling Rules
- Implement secure data storage with encryption both in transit and at rest.
- Include clear data retention and deletion policies.
- Document all data processing activities, especially AI/OCR processing.
- Maintain clear separation between medical data and user account data.
- Implement data portability mechanisms for GDPR compliance.
- Never store unencrypted prescription data, even temporarily.
- Log all data access and processing activities for audit purposes.

# UI/UX Rules for Legal Content
- Use ScrollView with proper padding for legal content.
- Implement consistent styling for legal text (font sizes, line heights, margins).
- Use theme-aware colors for all text elements.
- Include clear section headers and subsection titles.
- Maintain proper spacing between sections (24px margin).
- Ensure footer text is clearly visible and properly styled.
- Add proper padding at the bottom of scrollable content.

# Document Maintenance Rules
- Review and update legal documents at least quarterly.
- Maintain version history of all legal documents.
- Document all changes to legal text in commit messages.
- Keep all contact information up to date across documents.
- Ensure consistent formatting across all legal documents.
- Review and update disclaimers regularly based on app features.
- Sync updates between Terms of Service and Privacy Policy.

# Compliance Testing Rules
- Test all legal document links and contact information.
- Verify proper display of legal text in both light and dark themes.
- Test scrolling behavior on various screen sizes.
- Ensure proper rendering of special characters and formatting.
- Test accessibility of legal content (font sizes, contrast).
- Verify proper loading of DisclaimerComponent in all contexts.
- Test proper handling of user data deletion requests.

# Additional rules learned from recent lessons:
- Always include both medical and AI disclaimers using DisclaimerComponent.
- Ensure consistent section numbering (fix duplicate section 8 issue).
- Keep all legal documents in sync with the same Last Updated date.
- Use theme-aware colors for all text elements consistently.
- Include clear contact information in a consistent format.
- Maintain proper ScrollView padding and content container styling.
- Follow consistent styling patterns across all legal documents.
- Include clear data handling and processing explanations.
- Document all third-party service providers and data processors.
- Include specific details about AI/OCR processing limitations.
- Add clear explanations of user rights and how to exercise them.
- Maintain consistent formatting for bullet points and lists.
- Include clear explanations of payment processing and refunds.
- Document all data retention periods and deletion procedures.
- Keep all jurisdiction-specific sections (India, EU, California) up to date.
- Include clear explanations of international data transfers.
- Document all security measures and encryption practices.
- Maintain consistent styling for headers, paragraphs, and footers.
- Include clear explanations of user responsibilities.
- Document all app limitations and disclaimers consistently.

# Notification System Rules
- Always use a global context (NotificationContext) to manage notification state across the app.
- Fetch notifications on app startup and when the app comes to foreground.
- Implement optimistic UI updates for notification read status.
- Cache notifications locally to reduce database load and improve offline experience.
- Ensure notification badges accurately reflect the unread count from the global context.
- For notification popups:
  - Make them dismissible with proper animation
  - Provide clear visual distinction between read and unread items
  - Include timestamps with human-readable format (e.g., "2 hours ago")
  - Add pull-to-refresh functionality for easy manual refresh
  - Include infinite scroll or pagination for older notifications
- Notifications related to critical app functions (quota depletion, payment confirmation, etc.) should be stored in the database, not just displayed as alerts.
- All server-generated notifications (low quota, payment processed) should use database triggers instead of client-side generation.
- When a notification is related to a specific section of the app (e.g., scan quota), tapping it should navigate to the relevant screen.
- Clear all notifications option should have a confirmation dialog to prevent accidental deletion.
- After navigating from a notification, mark it as read automatically.
- Include proper error handling if notification operations (fetch, mark as read) fail.
- Allow notification filtering by type for better user experience.
- Log all notification-related errors for debugging.
- All notification UI elements should be accessible and have proper contrast ratios.
- Test all notification flows on both platforms (Android and iOS) for consistent behavior.
- Notification database operations should use RLS policies for security.
- In production, remove all test notification generation features.

# End of Cursor AI Editor Rules

# Navigation and Screen Management Rules
- Always implement proper back button handling in every screen using `useFocusEffect` and `BackHandler`.
- For Android, override the hardware back button behavior using:
  ```typescript
  useFocusEffect(
    React.useCallback(() => {
      const onBackPress = () => {
        // Custom back logic here
        return true; // Prevents default behavior
      };
      BackHandler.addEventListener('hardwareBackPress', onBackPress);
      return () => BackHandler.removeEventListener('hardwareBackPress', onBackPress);
    }, [])
  );
  ```
- Never rely on the default back button behavior for critical flows (payment, scan, upload).
- Always clean up navigation listeners in the cleanup function of useEffect/useFocusEffect.
- Implement consistent navigation behavior across both Android and iOS.
- For WebView screens (especially payment flows):
  - Add custom back button handling to prevent accidental exits
  - Show confirmation dialog before allowing navigation away from critical processes
  - Handle both hardware back button (Android) and gesture-based navigation (iOS)
- When navigating after critical operations (payment, scan):
  - Clear navigation history to prevent back navigation to sensitive screens
  - Use `navigation.reset()` instead of `navigation.navigate()` when appropriate
  - Ensure proper state cleanup before navigation
- For modal screens:
  - Add proper close button in the header
  - Handle both swipe-to-dismiss and back button consistently
  - Show confirmation dialog before dismissing if there are unsaved changes
- Maintain consistent header styling and navigation options across all screens
- Always handle navigation edge cases:
  - Deep linking
  - Background to foreground transitions
  - Screen rotation
  - Low memory conditions
- For payment flows:
  - Prevent multiple navigation attempts during processing
  - Handle timeout scenarios with proper user feedback
  - Provide clear exit paths for failed transactions
- Log all critical navigation events for debugging purposes
- Test navigation flows on both platforms with various user interaction patterns 

# Info Tab Navigation Rules
- For Info tab child pages (Terms of Service, Privacy Policy, etc.):
  - Use Stack Navigator with custom header configuration for consistent back button behavior
  - Implement custom header left button using `headerLeft` prop in navigation options
  - Use theme-aware colors for header elements (text, icons, background)
  - Add proper padding to account for system status bar on Android
  - Example header configuration:
    ```typescript
    navigation.setOptions({
      headerLeft: () => (
        <TouchableOpacity 
          onPress={() => navigation.goBack()}
          style={{ marginLeft: 16, padding: 8 }}
        >
          <Ionicons name="arrow-back" size={24} color={colors.text} />
        </TouchableOpacity>
      ),
      headerTitle: "Page Title",
      headerTitleStyle: { color: colors.text },
      headerStyle: { 
        backgroundColor: colors.background,
        elevation: 0,
        shadowOpacity: 0
      }
    });
    ```
  - Ensure consistent header styling across all info pages:
    - Remove header border/shadow (elevation: 0, shadowOpacity: 0)
    - Use consistent padding and touch targets (minimum 44x44px)
    - Maintain uniform header height and element spacing
  - For scrollable content:
    - Use ScrollView with proper contentContainerStyle
    - Add bottom padding to account for safe area
    - Handle keyboard avoidance if needed
  - For system back gestures (iOS) and hardware back button (Android):
    - Allow default back behavior for info pages as they don't contain unsaved changes
    - No need for confirmation dialogs when leaving info pages
    - Ensure smooth transition animations
  - When navigating to info pages:
    - Use `navigation.navigate()` instead of `push` to prevent stack buildup
    - Clear any irrelevant navigation params
    - Reset scroll position to top 

# AI Change Scope Limitation Rule
- The AI must not change any functionality, layout, design, function, or feature unless explicitly requested by the user.
- If the user requests a change, only the specific part(s) mentioned by the user should be modified.
- The AI must not add, remove, or alter any other code, UI, or logic beyond what is directly specified by the user request.
- No autonomous or speculative changes are allowed outside the user's explicit instructions.

# Git and Version Control Rules
- Always create descriptive commit messages with a format of: `[Component/Feature]: Brief description of changes`. For example, `[Auth]: Fix session persistence with AsyncStorage`.
- Include the Taskmaster task ID in commits when implementing tracked tasks: `[Auth]: Fix session persistence with AsyncStorage [task-123]`.
- Create separate branches for major features and fixes using a naming pattern: `feature/feature-name` or `fix/issue-description`.
- Never commit directly to the main/master branch for production code - always use pull requests with appropriate reviews.
- Before pushing changes, run `git pull --rebase` to incorporate any remote changes and maintain a cleaner commit history.
- When resolving merge conflicts, consult with the original author of the conflicting code when possible, especially for complex logic.
- Add proper `.gitignore` entries for all environment-specific files, build artifacts, and sensitive information.
- Never commit API keys, passwords, or other secrets. Use environment variables or secure storage solutions.
- Tag important releases with semantic versioning (`v1.0.0`, `v1.1.0`, etc.) and include release notes in the tag description.
- When making changes across multiple files that comprise a single feature or fix, commit them together to maintain atomic commits.
- Regularly push changes to remote repositories to ensure work isn't lost and team members can see progress.
- For native code changes, include build instructions or notes in the commit message to help other developers understand any required rebuild steps.
- Include the Android/iOS compatibility impact in commit messages when making platform-specific changes.
- When fixing build process issues, document the problem and solution in both commit messages and project documentation.
- Clean up local branches after they've been merged to keep the repository organized.
- When collaborating on a feature, use clear PR descriptions that reference design documents, specifications, or Taskmaster tasks.
- Perform partial commits using `git add -p` for large changes to create logical, reviewable commit units.

# Additional rules learned from recent lessons:
- Always ensure UI elements (especially header buttons) are not blocked by system overlays. For Android, add sufficient top padding to account for the status bar (use StatusBar.currentHeight).
- Never leave debug or test code in production. Remove all debug/test buttons, global debug functions, test logs, and temporary test logic before release.
- Only keep essential UI elements in production builds. All test and debug UI must be removed.
- Always use global context (useAuth) for scan quota management and never use local state for quota except for optimistic UI updates.
- When adding new UI elements, ensure minimum touch target size (at least 44x44px) for accessibility and usability.
- When adding a refresh button for quota, always use the global refreshScansRemaining function and ensure it updates the UI from the backend.
- When making layout changes, always test on both Android and iOS to ensure no elements are blocked by system UI overlays.
- All rules and automation guidelines must be kept in sync between cursor-ai-rules.txt and .cursor/rules/prescription-rules.mdc.
- When using StatusBar, prefer non-translucent (translucent={false}) for main screens to avoid layout issues and unexpected spacing at the top.
- Avoid duplicate UI components, especially headers or status bars, that can create unnecessary whitespace or visual inconsistencies.
- When fixing layout issues, first check for duplicate components, status bar configurations, and padding/margin values.
- Preserve original screen layouts when making unrelated changes to prevent unintended UI regressions.
- Never modify tab navigation layouts unnecessarily as it can affect all screens.
- For multi-platform layouts, use Platform.OS to provide platform-specific values rather than one-size-fits-all approaches.
- When adjusting StatusBar components, check how it affects neighboring screens and tab navigation.
- For screens with overlapping headers or gradients, ensure z-index values are properly set to prevent visual artifacts.
- Keep UI element measurements consistent across all screens (e.g., don't use different button sizes for the same action on different screens).
- When refactoring status bar handling, consider moving that logic to a consistent place like navigation configuration rather than individual screens.
- When using custom components like AppStatusBar, ensure they're only added to screens that need them to avoid layout inconsistencies.
- Always configure Supabase client with AsyncStorage in React Native for persistent sessions by adding auth options with storage, autoRefreshToken, persistSession (all true), and detectSessionInUrl (false). Also ensure the AsyncStorage package is properly installed and linked.
- After making changes to authentication or session management, always test by closing and reopening the app to verify persistent login works correctly.
- For module errors like "NativeModule: AsyncStorage is null", always ensure the package is properly installed using "expo install" with the exact version required by your Expo SDK.
- When adding or updating native dependencies like AsyncStorage, a full rebuild is required: 1) stop the current server, 2) run `npx expo prebuild --clean` to clean native code, and 3) run `npx expo run:android` (or ios) to rebuild the app with the new native modules. Simply restarting the dev server is not sufficient.
- If experiencing "Missing the required default export" errors with Expo Router even when the export is present, check if the file is being correctly recognized - this can be a false positive during development that requires a full rebuild to resolve.
- On Windows, be aware of path length limitations (maximum 260 characters) when building React Native projects. Long project paths can cause build failures, especially with nested node_modules. Consider: 1) Moving the project to a shorter path (e.g., C:\RxAI instead of C:\Users\username\Documents\Projects\etc), 2) Using EAS Build for cloud building which avoids local path issues, or 3) Enabling long path support in Windows.
- When local builds fail due to environment issues, use EAS Build (`eas build --platform android --profile development`) as a reliable alternative that provides a consistent build environment and avoids local configuration problems.
- Always maintain an eas.json configuration file for cloud builds with appropriate profiles (development, preview, production) to facilitate quick building without local environment issues.
- Test authentication persistence by fully closing the app (not just minimizing) and reopening it, as this is the only reliable way to verify session storage is working correctly.
- When making native code changes, understand the distinction between JavaScript-only changes (which only require Metro server restart) and native module changes (which require full app rebuild). Native module changes include adding/updating native dependencies, linking native modules, or modifying native code files.
- Use the Development Client (`npx expo start --dev-client`) instead of Expo Go when working with custom native modules. Expo Go only supports a limited set of pre-bundled native modules.
- After adding a new native dependency, always run `npx expo prebuild` to generate or update the native project files before building with `npx expo run:android` or `npx expo run:ios`.
- For consistent development across team members, document all native dependencies in a separate section of README.md including installation steps, required configuration, and potential platform-specific issues.
- When you encounter the error "NativeModule X is null", it indicates a native module wasn't properly linked. The complete solution requires: 1) ensure the package is properly installed, 2) run prebuild to update native files, and 3) perform a full rebuild of the app.
- Metro bundler (`npx expo start`) only handles JavaScript changes. It cannot detect or apply native code changes. Always rebuild the app after any native code modifications.
- Never mix Expo managed workflow and bare workflow concepts - if using custom native modules, commit to using the development client or EAS builds and avoid trying to use Expo Go.

# Navigation and Stack Management Rules
- For tabbed navigation (e.g., Info tab), always use `router.replace` when navigating from the tab root to a child page if you want to prevent stack buildup. Never use `router.push` or `<Link>` in these cases.
- Centralize all back navigation logic (hardware and header) in the layout or navigator component for a tab, not in individual child pages.
- Never mix `push` and `replace` for the same navigation flow. Choose one and enforce it for all related screens.
- After any navigation refactor, test by repeatedly navigating between tab root and child pages, and using back navigation, to ensure no stack buildup or navigation anomalies occur.
- Document the intended navigation pattern for each tab and its children in the project rules and keep this documentation up to date.

# End of Cursor AI Editor Rules

# Project Structure
#
# The project is organized as follows:
#
# app/
#   (tabs)/
#     info/
#       about.tsx
#       contact.tsx
#       medical-disclaimer.tsx
#       privacy-policy.tsx
#       terms-of-service.tsx
#       index.tsx
#       _layout.tsx
#     index.tsx
#     _layout.tsx
#     ProfileScreen.tsx
#   screens/
#     TermsOfServiceScreen.tsx
#     PrivacyPolicyScreen.tsx
#     ProcessingResultScreen.tsx
#     CameraScreen.tsx
#     SubscriptionScreen.tsx
#     VerifyOTPScreen.tsx
#     PriceChartScreen.tsx
#     CreateNewPasswordScreen.tsx
#     ResetPasswordScreen.tsx
#     ForgotPasswordScreen.tsx
#   RegisterScreen.tsx
#   LoginScreen.tsx
#   ForgotPasswordScreen.tsx
#   _layout.tsx
#   index.tsx
#   (auth)/
#   +not-found.tsx
# components/
#   ui/
#   utils/
#   [other components]
# constants/
# hooks/
# docs/
# Taskmaster/

# App Version Display Rule
- Always display the app version in the UI and code using expo-application's nativeApplicationVersion or getApplicationVersion(), never hardcode the version string. This ensures version changes in app.json are reflected everywhere automatically.